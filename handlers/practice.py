import logging
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from content.modules import get_module
from content.practice_tasks import PRACTICE_TASKS
from data.database import get_user_progress

router = Router()
logger = logging.getLogger(__name__)

async def show_practice_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    try:
        progress = await get_user_progress(message.from_user.id)
        builder = InlineKeyboardBuilder()
        
        for module_id in range(1, 6):  # –î–ª—è –≤—Å–µ—Ö 5 –º–æ–¥—É–ª–µ–π
            module = get_module(module_id)
            if not module:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
            if module_id in progress['completed_modules']:
                builder.add(types.InlineKeyboardButton(
                    text=f"‚úÖ {module['title']}",
                    callback_data=f"practice_module_{module_id}"
                ))
            else:
                builder.add(types.InlineKeyboardButton(
                    text=f"üîí {module['title']}",
                    callback_data="practice_locked"
                ))
        
        builder.adjust(1)
        await message.answer(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Practice menu error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π")

async def show_module_tasks(callback: types.CallbackQuery, module_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    try:
        tasks = PRACTICE_TASKS.get(module_id, [])
        if not tasks:
            await callback.answer("–ó–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return

        builder = InlineKeyboardBuilder()
        for i, task in enumerate(tasks, 1):
            builder.add(types.InlineKeyboardButton(
                text=f"–ó–∞–¥–∞–Ω–∏–µ {i}: {task['title']}",
                callback_data=f"practice_task_{module_id}_{i-1}"
            ))
        
        builder.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º",
            callback_data="practice_back"
        ))
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è {module_id}:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Module tasks error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π")

async def show_task_details(callback: types.CallbackQuery, module_id: int, task_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        tasks = PRACTICE_TASKS.get(module_id, [])
        task = tasks[task_index]
        
        text = (
            f"üîß <b>{task['title']}</b>\n\n"
            f"<u>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</u>\n{task['description']}\n\n"
            f"<u>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</u>\n{task['check']}\n\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–∞–π–ª) —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º."
        )
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º",
            callback_data=f"practice_module_{module_id}"
        ))
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Task details error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è")

@router.callback_query(F.data == "practice_locked")
async def handle_locked(callback: types.CallbackQuery):
    await callback.answer("üîí –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª–∏", show_alert=True)

@router.callback_query(F.data == "practice_back")
async def handle_back(callback: types.CallbackQuery):
    await show_practice_menu(callback.message)

@router.callback_query(F.data.startswith("practice_module_"))
async def handle_module(callback: types.CallbackQuery):
    module_id = int(callback.data.split("_")[2])
    await show_module_tasks(callback, module_id)

@router.callback_query(F.data.startswith("practice_task_"))
async def handle_task(callback: types.CallbackQuery):
    _, _, module_id, task_index = callback.data.split("_")
    await show_task_details(callback, int(module_id), int(task_index))

@router.message(F.document | F.photo)
async def handle_task_submission(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã/—Å–∫—Ä–∏–Ω—à–æ—Ç—ã"""
    try:
        # –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
        await message.answer(
            "‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        )
    except Exception as e:
        logger.error(f"Submission error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è")