import logging
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from content.modules import get_module, get_submodule
from data.database import get_user_progress, update_user_progress
from content.questions import QUESTIONS

router = Router()
logger = logging.getLogger(__name__)

async def show_test_selection(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        builder = InlineKeyboardBuilder()
        completed = (await get_user_progress(message.from_user.id))['completed_modules']
        
        for module_id in range(1, 6):  # –î–ª—è –≤—Å–µ—Ö 5 –º–æ–¥—É–ª–µ–π
            module = get_module(module_id)
            if not module:
                continue
                
            status = "‚úÖ" if module_id in completed else "üîí"
            builder.add(types.InlineKeyboardButton(
                text=f"{status} {module['title']}",
                callback_data=f"test_select_{module_id}"
            ))
        
        builder.adjust(1)
        await message.answer(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Test selection error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤")

async def start_test(callback: types.CallbackQuery, module_id: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é"""
    try:
        module = get_module(module_id)
        if not module:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        questions = QUESTIONS.get(module_id, [])
        if not questions:
            await callback.answer("–¢–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        await callback.message.edit_text(
            f"üß† –¢–µ—Å—Ç: {module['title']}\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.",
            reply_markup=InlineKeyboardBuilder().add(
                types.InlineKeyboardButton(
                    text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
                    callback_data=f"test_start_{module_id}_0_0"  # module_id, q_index, score
                )
            ).as_markup()
        )
    except Exception as e:
        logger.error(f"Test start error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞")

async def show_question(callback: types.CallbackQuery, module_id: int, q_index: int, score: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    try:
        questions = QUESTIONS.get(module_id, [])
        if q_index >= len(questions):
            await finish_test(callback, module_id, score)
            return

        question = questions[q_index]
        builder = InlineKeyboardBuilder()

        for i, option in enumerate(question['options']):
            builder.add(types.InlineKeyboardButton(
                text=option,
                callback_data=f"test_answer_{module_id}_{q_index}_{score}_{i}"
            ))
        
        builder.adjust(1)
        await callback.message.edit_text(
            f"‚ùì –í–æ–ø—Ä–æ—Å {q_index + 1}/{len(questions)}\n\n{question['text']}",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Question show error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞")

async def handle_answer(callback: types.CallbackQuery, module_id: int, q_index: int, score: int, answer_idx: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        questions = QUESTIONS.get(module_id, [])
        question = questions[q_index]
        
        if answer_idx == question['correct']:
            score += 1
            await callback.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + question['options'][question['correct']])
        
        await show_question(callback, module_id, q_index + 1, score)
    except Exception as e:
        logger.error(f"Answer handling error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")

async def finish_test(callback: types.CallbackQuery, module_id: int, score: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        questions = QUESTIONS.get(module_id, [])
        total = len(questions)
        percentage = int((score / total) * 100) if total > 0 else 0
        
        if percentage >= 70:
            result = (
                "‚úÖ <b>–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage}%\n\n"
                "–ú–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await update_user_progress(
                user_id=callback.from_user.id,
                module=module_id,
                mark_completed=True
            )
        else:
            result = (
                "‚ùå <b>–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>\n\n"
                f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage}%\n\n"
                "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å 70% –∏ –±–æ–ª–µ–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑."
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(
                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∞–º",
                callback_data="back_to_tests"
            )
        )
        
        if percentage < 70:
            builder.row(
                types.InlineKeyboardButton(
                    text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data=f"test_start_{module_id}_0_0"
                )
            )
        
        await callback.message.edit_text(
            result,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Test finish error: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data.startswith("test_select_"))
async def test_select_handler(callback: types.CallbackQuery):
    module_id = int(callback.data.split("_")[2])
    await start_test(callback, module_id)

@router.callback_query(F.data.startswith("test_start_"))
async def test_start_handler(callback: types.CallbackQuery):
    _, _, module_id, q_index, score = callback.data.split("_")
    await show_question(callback, int(module_id), int(q_index), int(score))

@router.callback_query(F.data.startswith("test_answer_"))
async def test_answer_handler(callback: types.CallbackQuery):
    _, _, module_id, q_index, score, answer_idx = callback.data.split("_")
    await handle_answer(callback, int(module_id), int(q_index), int(score), int(answer_idx))

@router.callback_query(F.data == "back_to_tests")
async def back_to_tests_handler(callback: types.CallbackQuery):
    await show_test_selection(callback.message)